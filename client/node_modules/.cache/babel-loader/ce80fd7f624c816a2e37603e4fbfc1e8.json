{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { POPULAR_BASE_URL } from \"../../config\";\n\nconst useHomeFetch = searchTerm => {\n  const [state, setState] = useState({\n    movies: []\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchMovies = async endpoint => {\n    setLoading(true);\n    setError(false);\n    const isLoadMore = endpoint.search(\"page\"); // is page is present in the end point means we r loading more movies\n\n    try {\n      const result = await (await fetch(endpoint)).json(); // console.log(\"result == \", result)\n\n      setState(prev => ({ ...prev,\n        movies: isLoadMore !== -1 ? [...prev.movies, ...result.results] : [...result.results],\n        heroImage: prev.heroImage || result.results[0],\n        currentPage: result.page,\n        totalPages: result.total_pages\n      }));\n    } catch (error) {\n      setError(true);\n      console.error(error.message);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (sessionStorage.homeState) {\n      // console.log(\"Loading data from session storage\")\n      setState(JSON.parse(sessionStorage.homeState));\n      setLoading(false);\n    } else {\n      console.log(\"Fetching from the movie db api\");\n      fetchMovies(POPULAR_BASE_URL);\n    }\n  }, []);\n  useEffect(() => {\n    if (!searchTerm) {\n      // console.log(\"Writing to session storage\")\n      sessionStorage.setItem('homeState', JSON.stringify(state));\n    }\n  }, [searchTerm, state]);\n  return [{\n    state,\n    loading,\n    error\n  }, fetchMovies];\n};\n\nexport default useHomeFetch;","map":{"version":3,"sources":["C:/Users/DELL/Keep Watching/Keep-Watching/client/src/components/hooks/useHomeFetch.jsx"],"names":["useState","useEffect","POPULAR_BASE_URL","useHomeFetch","searchTerm","state","setState","movies","loading","setLoading","error","setError","fetchMovies","endpoint","isLoadMore","search","result","fetch","json","prev","results","heroImage","currentPage","page","totalPages","total_pages","console","message","sessionStorage","homeState","JSON","parse","log","setItem","stringify"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SACIC,gBADJ,QAGK,cAHL;;AAKA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAE;AAAEO,IAAAA,MAAM,EAAE;AAAV,GAAF,CAAlC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAE,KAAF,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAE,KAAF,CAAlC;;AAGA,QAAMY,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACpCJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,UAAMG,UAAU,GAAGD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,CAAnB,CAJoC,CAIQ;;AAC5C,QAAG;AACC,YAAMC,MAAM,GAAG,MAAM,CAAE,MAAMC,KAAK,CAACJ,QAAD,CAAb,EAA0BK,IAA1B,EAArB,CADD,CAEC;;AACAZ,MAAAA,QAAQ,CAACa,IAAI,KACL,EACI,GAAGA,IADP;AAEIZ,QAAAA,MAAM,EACJO,UAAU,KAAK,CAAC,CAAhB,GACD,CAAC,GAAGK,IAAI,CAACZ,MAAT,EAAiB,GAAGS,MAAM,CAACI,OAA3B,CADC,GAGD,CAAC,GAAGJ,MAAM,CAACI,OAAX,CANL;AAOIC,QAAAA,SAAS,EAAEF,IAAI,CAACE,SAAL,IAAkBL,MAAM,CAACI,OAAP,CAAe,CAAf,CAPjC;AAQIE,QAAAA,WAAW,EAAEN,MAAM,CAACO,IARxB;AASIC,QAAAA,UAAU,EAAER,MAAM,CAACS;AATvB,OADK,CAAL,CAAR;AAYC,KAfL,CAeK,OAAMf,KAAN,EAAY;AACTC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAe,MAAAA,OAAO,CAAChB,KAAR,CAAcA,KAAK,CAACiB,OAApB;AACH;;AACDlB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAzBL;;AA2BIR,EAAAA,SAAS,CAAG,MAAM;AACd,QAAI2B,cAAc,CAACC,SAAnB,EAA6B;AACzB;AACAvB,MAAAA,QAAQ,CAACwB,IAAI,CAACC,KAAL,CAAWH,cAAc,CAACC,SAA1B,CAAD,CAAR;AACApB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJD,MAIK;AAEDiB,MAAAA,OAAO,CAACM,GAAR,CAAY,gCAAZ;AACApB,MAAAA,WAAW,CAACV,gBAAD,CAAX;AACH;AACC,GAVG,EAUD,EAVC,CAAT;AAYAD,EAAAA,SAAS,CAAE,MAAM;AACb,QAAG,CAACG,UAAJ,EAAe;AACX;AACAwB,MAAAA,cAAc,CAACK,OAAf,CAAuB,WAAvB,EAAoCH,IAAI,CAACI,SAAL,CAAe7B,KAAf,CAApC;AACH;AACJ,GALQ,EAKN,CAACD,UAAD,EAAaC,KAAb,CALM,CAAT;AAMJ,SAAO,CAAC;AAACA,IAAAA,KAAD;AAAQG,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAD,EAA0BE,WAA1B,CAAP;AACH,CApDD;;AAsDA,eAAeT,YAAf","sourcesContent":["import {useState, useEffect} from \"react\"\r\nimport  {\r\n    POPULAR_BASE_URL \r\n}\r\nfrom \"../../config\"\r\n\r\nconst useHomeFetch = (searchTerm) => {\r\n    const [state, setState] = useState( { movies: [] } )\r\n    const [loading, setLoading] = useState( false )\r\n    const [error, setError] = useState( false )\r\n \r\n    \r\n    const fetchMovies = async (endpoint) => {\r\n        setLoading(true)\r\n        setError(false)\r\n        \r\n        const isLoadMore = endpoint.search(\"page\")  // is page is present in the end point means we r loading more movies\r\n        try{\r\n            const result = await ( await fetch(endpoint) ).json();\r\n            // console.log(\"result == \", result)\r\n            setState(prev => (\r\n                    {\r\n                        ...prev,\r\n                        movies: \r\n                        ( isLoadMore !== -1 ?\r\n                         [...prev.movies, ...result.results]\r\n                         :\r\n                         [...result.results]),\r\n                        heroImage: prev.heroImage || result.results[0],\r\n                        currentPage: result.page,\r\n                        totalPages: result.total_pages\r\n                    }))\r\n            }catch(error){\r\n                setError(true)\r\n                console.error(error.message)\r\n            }\r\n            setLoading(false)\r\n        }\r\n        \r\n        useEffect(  () => {\r\n            if (sessionStorage.homeState){\r\n                // console.log(\"Loading data from session storage\")\r\n                setState(JSON.parse(sessionStorage.homeState));\r\n                setLoading(false)\r\n            }else{\r\n\r\n                console.log(\"Fetching from the movie db api\")\r\n                fetchMovies(POPULAR_BASE_URL)\r\n            }\r\n             }, [] )\r\n        \r\n        useEffect( () => {\r\n            if(!searchTerm){\r\n                // console.log(\"Writing to session storage\")\r\n                sessionStorage.setItem('homeState', JSON.stringify(state))\r\n            }\r\n        }, [searchTerm, state])\r\n    return [{state, loading, error}, fetchMovies]\r\n}\r\n\r\nexport default useHomeFetch"]},"metadata":{},"sourceType":"module"}