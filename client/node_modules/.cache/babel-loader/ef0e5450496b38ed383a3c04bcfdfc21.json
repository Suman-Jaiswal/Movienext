{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\n\nconst useFetchSimilarMovies = movieID => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const endpoint = \"/api/similarMovies/\" + movieID;\n      const result = await axios.get(endpoint);\n      console.log(\"resilt in useFetchFeed = \", result);\n      setState({ ...result\n      });\n    } catch (error) {\n      console.error(error.message);\n      setError(true);\n    }\n\n    setLoading(false);\n  }, [movieID]);\n  useEffect(() => {\n    if (localStorage[movieID + \"similar\"]) {\n      setLoading(false);\n      console.log(\"grabbing similar movies for\" + movieID + \"from local storage\");\n      setState(JSON.parse(localStorage[movieID + \"similar\"]));\n      setLoading(false);\n    } else {\n      console.log(\"making an api req for getting movies similar to \" + movieID);\n      fetchData();\n    }\n  }, [fetchData, movieID]);\n  useEffect(() => {\n    localStorage.setItem(movieID + \"similar\", JSON.stringify(state));\n  }, [movieID, state]);\n  return [state, loading, error];\n};\n\nexport default useFetchSimilarMovies;","map":{"version":3,"sources":["C:/Users/DELL/Keep Watching/Keep-Watching/client/src/components/hooks/useFetchSimilarMovies.jsx"],"names":["useState","useEffect","useCallback","axios","useFetchSimilarMovies","movieID","state","setState","loading","setLoading","error","setError","fetchData","endpoint","result","get","console","log","message","localStorage","JSON","parse","setItem","stringify"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,WAA7B,QAA+C,OAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAqB,GAAIC,OAAD,IAAa;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAGA,QAAMY,SAAS,GAAGV,WAAW,CAAC,YAAY;AACtCS,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,wBAAwBR,OAAzC;AACA,YAAMS,MAAM,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUF,QAAV,CAArB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCH,MAAzC;AACAP,MAAAA,QAAQ,CAAC,EACL,GAAGO;AADE,OAAD,CAAR;AAIH,KARD,CAQE,OAAOJ,KAAP,EAAc;AACZM,MAAAA,OAAO,CAACN,KAAR,CAAcA,KAAK,CAACQ,OAApB;AACAP,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAhB4B,EAgB1B,CAACJ,OAAD,CAhB0B,CAA7B;AAkBAJ,EAAAA,SAAS,CAAE,MAAM;AACb,QAAGkB,YAAY,CAACd,OAAO,GAAC,SAAT,CAAf,EAAmC;AAC/BI,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAA+BZ,OAA/B,GAAwC,oBAApD;AACAE,MAAAA,QAAQ,CAACa,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACd,OAAO,GAAC,SAAT,CAAvB,CAAD,CAAR;AACAI,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KALD,MAKK;AACDO,MAAAA,OAAO,CAACC,GAAR,CAAY,qDAAqDZ,OAAjE;AACAO,MAAAA,SAAS;AACZ;AACJ,GAVQ,EAUN,CAACA,SAAD,EAAYP,OAAZ,CAVM,CAAT;AAYAJ,EAAAA,SAAS,CACL,MAAM;AAEFkB,IAAAA,YAAY,CAACG,OAAb,CAAqBjB,OAAO,GAAC,SAA7B,EAAyCe,IAAI,CAACG,SAAL,CAAejB,KAAf,CAAzC;AACH,GAJI,EAKL,CAACD,OAAD,EAAUC,KAAV,CALK,CAAT;AAOA,SAAO,CAACA,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACH,CA5CD;;AA8CA,eAAeN,qBAAf","sourcesContent":["import {useState, useEffect, useCallback} from \"react\"\r\nimport axios from \"axios\"\r\n\r\nconst useFetchSimilarMovies = (movieID) => {\r\n    const [state, setState] = useState({})\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false) \r\n \r\n    \r\n    const fetchData = useCallback(async () => {\r\n        setError(false)\r\n        setLoading(true)\r\n        try {\r\n            const endpoint = \"/api/similarMovies/\" + movieID\r\n            const result = await axios.get(endpoint)\r\n            console.log(\"resilt in useFetchFeed = \", result)\r\n            setState({\r\n                ...result\r\n            })\r\n\r\n        } catch (error) {\r\n            console.error(error.message)\r\n            setError(true)\r\n        }\r\n        setLoading(false)\r\n    }, [movieID])\r\n\r\n    useEffect( () => {\r\n        if(localStorage[movieID+\"similar\"]){\r\n            setLoading(false)\r\n            console.log(\"grabbing similar movies for\"+ movieID +\"from local storage\")\r\n            setState(JSON.parse(localStorage[movieID+\"similar\"]))\r\n            setLoading(false)\r\n        }else{\r\n            console.log(\"making an api req for getting movies similar to \" + movieID)\r\n            fetchData()\r\n        }\r\n    }, [fetchData, movieID])   \r\n\r\n    useEffect(\r\n        () => {\r\n            \r\n            localStorage.setItem(movieID+\"similar\",  JSON.stringify(state))\r\n        },\r\n        [movieID, state]\r\n    )\r\n    return [state, loading, error]\r\n}\r\n\r\nexport default useFetchSimilarMovies"]},"metadata":{},"sourceType":"module"}