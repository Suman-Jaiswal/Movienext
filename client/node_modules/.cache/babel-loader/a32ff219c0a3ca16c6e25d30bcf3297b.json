{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { session } from \"passport\";\n\nconst useFetchFeed = movieID => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const endpoint = \"/api/reviews/feed\";\n      const result = await axios.get(endpoint);\n      console.log(\"resilt in useFetchFeed = \", result);\n      setState({ ...result\n      });\n    } catch (error) {\n      console.error(error.message);\n      setError(true);\n    }\n\n    setLoading(false);\n  }, [movieID]);\n  useEffect(() => {\n    // if(sessionStorage[\"feed\"] && sessionStorage[\"feed\"]!=={}){\n    //     console.log(\"grabbing Feed from session storage\")\n    //     setState(JSON.parse(sessionStorage[\"feed\"]))\n    //     setLoading(false)\n    // }else{\n    console.log(\"making an api req for getting the feed\");\n    fetchData(); // }\n  }, [fetchData, movieID]);\n  useEffect(() => {\n    sessionStorage.setItem(\"feed\", JSON.stringify(state));\n  }, [movieID, state]);\n  return [state, loading, error];\n};\n\nexport default useFetchFeed;","map":{"version":3,"sources":["C:/Users/DELL/Keep Watching/Keep-Watching/client/src/components/hooks/useFetchFeed.jsx"],"names":["useState","useEffect","useCallback","axios","session","useFetchFeed","movieID","state","setState","loading","setLoading","error","setError","fetchData","endpoint","result","get","console","log","message","sessionStorage","setItem","JSON","stringify"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,WAA7B,QAA+C,OAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,UAAxB;;AAEA,MAAMC,YAAY,GAAIC,OAAD,IAAa;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMa,SAAS,GAAGX,WAAW,CAAC,YAAY;AACtCU,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACA,YAAMI,QAAQ,GAAG,mBAAjB;AACA,YAAMC,MAAM,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUF,QAAV,CAArB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCH,MAAzC;AACAP,MAAAA,QAAQ,CAAC,EACL,GAAGO;AADE,OAAD,CAAR;AAIH,KARD,CAQE,OAAOJ,KAAP,EAAc;AACZM,MAAAA,OAAO,CAACN,KAAR,CAAcA,KAAK,CAACQ,OAApB;AACAP,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAjB4B,EAiB1B,CAACJ,OAAD,CAjB0B,CAA7B;AAmBAL,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACA;AACA;AACA;AACIgB,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAL,IAAAA,SAAS,GAPA,CAQb;AACH,GATQ,EASN,CAACA,SAAD,EAAYP,OAAZ,CATM,CAAT;AAWAL,EAAAA,SAAS,CACL,MAAM;AACFmB,IAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAAgCC,IAAI,CAACC,SAAL,CAAehB,KAAf,CAAhC;AACH,GAHI,EAIL,CAACD,OAAD,EAAUC,KAAV,CAJK,CAAT;AAMA,SAAO,CAACA,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACH,CA1CD;;AA4CA,eAAeN,YAAf","sourcesContent":["import {useState, useEffect, useCallback} from \"react\"\r\nimport axios from \"axios\"\r\nimport { session } from \"passport\"\r\n\r\nconst useFetchFeed = (movieID) => {\r\n    const [state, setState] = useState({})\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false) \r\n\r\n    const fetchData = useCallback(async () => {\r\n        setError(false)\r\n        setLoading(true)\r\n \r\n        try {\r\n            const endpoint = \"/api/reviews/feed\"\r\n            const result = await axios.get(endpoint)\r\n            console.log(\"resilt in useFetchFeed = \", result)\r\n            setState({\r\n                ...result\r\n            })\r\n\r\n        } catch (error) {\r\n            console.error(error.message)\r\n            setError(true)\r\n        }\r\n        setLoading(false)\r\n    }, [movieID])\r\n\r\n    useEffect( () => {\r\n        // if(sessionStorage[\"feed\"] && sessionStorage[\"feed\"]!=={}){\r\n        //     console.log(\"grabbing Feed from session storage\")\r\n        //     setState(JSON.parse(sessionStorage[\"feed\"]))\r\n        //     setLoading(false)\r\n        // }else{\r\n            console.log(\"making an api req for getting the feed\")\r\n            fetchData()\r\n        // }\r\n    }, [fetchData, movieID])\r\n\r\n    useEffect(\r\n        () => {\r\n            sessionStorage.setItem(\"feed\",  JSON.stringify(state))\r\n        },\r\n        [movieID, state]\r\n    )\r\n    return [state, loading, error]\r\n}\r\n\r\nexport default useFetchFeed"]},"metadata":{},"sourceType":"module"}