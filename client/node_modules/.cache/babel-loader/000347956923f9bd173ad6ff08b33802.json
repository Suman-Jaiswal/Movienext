{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\n\nconst useUserReviewsFetch = userID => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      console.log(\"user id in usefetch = \", userID);\n      const endpoint = \"/api/reviews/user/\" + userID;\n      const result = await axios.get(endpoint); // console.log(\"result ins useFetch = \", result)\n\n      setState({ ...result\n      });\n    } catch (error) {\n      console.error(error.message);\n      setError(true);\n    }\n\n    setLoading(false);\n  }, [userID]);\n  useEffect(() => {\n    // if(sessionStorage[movieID + \"review\"] != {}){\n    //     setLoading(false)\n    //     console.log(\"grabbing review for \"+movieID+\" from session storage\")\n    //     setState(JSON.parse(sessionStorage[movieID+\"review\"]))\n    //     setLoading(false)\n    // }else{\n    console.log(\"making an api req for getting the reviews\");\n    fetchData(); // }\n  }, [fetchData, userID]); // useEffect(\n  //     () => {\n  //         // sessionStorage.setItem(movieID+\"review\", JSON.stringify(state))\n  //     },\n  //     [userID, state]\n  // )\n\n  return [state, loading, error];\n};\n\nexport default useUserReviewsFetch;","map":{"version":3,"sources":["C:/Users/DELL/Keep Watching/Keep-Watching/client/src/components/hooks/useUserReviewsFetch.jsx"],"names":["useState","useEffect","useCallback","axios","useUserReviewsFetch","userID","state","setState","loading","setLoading","error","setError","fetchData","console","log","endpoint","result","get","message"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,WAA7B,QAA+C,OAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,mBAAmB,GAAIC,MAAD,IAAY;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAGA,QAAMY,SAAS,GAAGV,WAAW,CAAC,YAAY;AACtCS,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCT,MAAtC;AACA,YAAMU,QAAQ,GAAG,uBAAuBV,MAAxC;AACA,YAAMW,MAAM,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUF,QAAV,CAArB,CAHA,CAIA;;AAEAR,MAAAA,QAAQ,CAAC,EACL,GAAGS;AADE,OAAD,CAAR;AAGH,KATD,CASE,OAAON,KAAP,EAAc;AACZG,MAAAA,OAAO,CAACH,KAAR,CAAcA,KAAK,CAACQ,OAApB;AACAP,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAlB4B,EAkB1B,CAACJ,MAAD,CAlB0B,CAA7B;AAoBAJ,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACA;AACA;AACA;AACA;AACIY,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACAF,IAAAA,SAAS,GARA,CASb;AACH,GAVQ,EAUN,CAACA,SAAD,EAAYP,MAAZ,CAVM,CAAT,CA1BoC,CAsCpC;AACA;AACA;AACA;AACA;AACA;;AACI,SAAO,CAACC,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACP,CA7CD;;AA+CA,eAAeN,mBAAf","sourcesContent":["import {useState, useEffect, useCallback} from \"react\"\r\nimport axios from \"axios\"\r\n\r\nconst useUserReviewsFetch = (userID) => {\r\n    const [state, setState] = useState({})\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false) \r\n\r\n\r\n    const fetchData = useCallback(async () => {\r\n        setError(false)\r\n        setLoading(true)\r\n\r\n        try {\r\n            console.log(\"user id in usefetch = \", userID)\r\n            const endpoint = \"/api/reviews/user/\" + userID\r\n            const result = await axios.get(endpoint)\r\n            // console.log(\"result ins useFetch = \", result)\r\n\r\n            setState({\r\n                ...result\r\n            })\r\n        } catch (error) {\r\n            console.error(error.message)\r\n            setError(true)\r\n        }\r\n        setLoading(false)\r\n    }, [userID])\r\n\r\n    useEffect( () => {\r\n        // if(sessionStorage[movieID + \"review\"] != {}){\r\n        //     setLoading(false)\r\n        //     console.log(\"grabbing review for \"+movieID+\" from session storage\")\r\n        //     setState(JSON.parse(sessionStorage[movieID+\"review\"]))\r\n        //     setLoading(false)\r\n        // }else{\r\n            console.log(\"making an api req for getting the reviews\")\r\n            fetchData()\r\n        // }\r\n    }, [fetchData, userID])\r\n\r\n    // useEffect(\r\n    //     () => {\r\n    //         // sessionStorage.setItem(movieID+\"review\", JSON.stringify(state))\r\n    //     },\r\n    //     [userID, state]\r\n    // )\r\n        return [state, loading, error]\r\n}\r\n\r\nexport default useUserReviewsFetch"]},"metadata":{},"sourceType":"module"}