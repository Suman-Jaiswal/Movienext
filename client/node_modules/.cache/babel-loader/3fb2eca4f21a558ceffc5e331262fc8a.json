{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Keep Watching\\\\Keep-Watching\\\\client\\\\src\\\\context\\\\Authentication\\\\AuthenticationState.js\";\n// import React, { useReducer, useContext } from 'react';\nimport React, { useReducer, useContext } from \"react\";\nimport chalk from \"chalk\";\nimport AuthContext from './authenticationContext';\nimport authReducer from './authenticationReducer';\nimport axios from \"axios\";\nimport { REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGOUT, SET_LOADING_TRUE, UPDATE_USER, SET_LOADING_FALSE } from '../types';\nimport setAthToken from \"../../utils/setAuthToken\"; // import AlertContext from \"../AlertContext/AlertContext\"\n\nimport AlertContext from \"../AlertContext/AlertContext\";\n\nconst AuthState = props => {\n  const alertContext = useContext(AlertContext); // console.log(\"alert Context = \", alertContext)\n  // console.log(\"SetAlert = \", alertContext.setAlert)\n\n  const setAlert = alertContext.setAlert;\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    loading: true,\n    user: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  const setLoadingTrue = () => {\n    dispatch({\n      type: SET_LOADING_TRUE\n    });\n  }; //  Load user   ----> check for which user is logged in\n\n\n  const loadUser = async () => {\n    //  --------> for authentication to work we need to store the token in global header with key\n    //  ---------> X-auth-token\n    // console.log(\"checking token\")\n    if (localStorage.token) {\n      //-------> if a token exists in the local storage set it to global header\n      // console.log(\"token found \", localStorage.token)\n      setAthToken(localStorage.token); // ---> utility function  \n    }\n\n    try {\n      const res = await axios.get(\"/api/auth\"); // this will add user to the res.data if token is valid\n      //  this code will run only if above request is successful\n\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (error) {\n      //  this code will run if the authentication goes wrong\n      console.error(\"there was an error in the catch block of the loadUser in the authenticationState.jsx\");\n      console.log(\"ERROR:-\", Error.message);\n      console.log(\"ERROR:-\", Error);\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; //  Register user -----> create user and token\n\n\n  const register = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    setLoadingTrue();\n\n    try {\n      const res = await axios.post(\"/api/users/\", formData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n      setLoadingFalse();\n      return res;\n    } catch (error) {\n      setLoadingFalse();\n      console.log(\"ERROR IN authenticationstate.js in the register function catch block\");\n      console.log(\"error = \", error.response.data.msg);\n      setAlert(error.response.data.msg, \"danger\");\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: error.response.data.msg\n      });\n    }\n  }; //  login user  --------> login and create token\n\n\n  const login = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/auth\", formData, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      console.log(chalk.green(\"login Successful\")); // console.log(chalk.green(\"the response was = \", res))\n\n      loadUser();\n      setLoadingFalse();\n      return res;\n    } catch (error) {\n      setAlert(error.response.data.msg, \"danger\");\n      setLoadingFalse();\n      console.log(\"some error in the catch block of the login function in the AuthState.jsx\");\n      console.log(\"error --> \", error.message);\n      console.log(\"Error --> oobjb \", error.response.data.msg);\n    }\n  }; //  Signin with Google\n\n\n  const signInWithGoogle = async () => {\n    try {\n      const res = await axios.get(\"localhost:3000/api/auth/google\"); // console.log(\"RES.data in signin with google= \", res.data)\n\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(\"some error in the catch block of the signinwithGogle function in the AuthState.jsx\");\n      console.log(\"error --> \", error.message); // console.log(\"Error --> \", error.response.data.msg)\n    }\n  }; //  logout user --------> Logout the user\n\n\n  const logout = () => {\n    dispatch({\n      type: LOGOUT\n    });\n    setLoadingFalse();\n  }; // clear errors      --------> clear the errors\n\n\n  const clearErrors = () => console.log(\"Clear errors\"); //  Set loading true\n\n\n  const setLoadingtrue = () => {\n    dispatch({\n      type: SET_LOADING_TRUE\n    });\n  }; //  set Loading fasle\n\n\n  const setLoadingFalse = () => {\n    dispatch({\n      type: SET_LOADING_FALSE\n    });\n  }; // update User\n  // eslint-disable-next-line\n\n\n  const updateUser = user => {\n    dispatch({\n      actionn: UPDATE_USER,\n      payload: user\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      user: state.user,\n      error: state.error,\n      setLoadingtrue,\n      setLoadingFalse,\n      register,\n      login,\n      signInWithGoogle,\n      logout,\n      clearErrors,\n      loadUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["C:/Users/DELL/Keep Watching/Keep-Watching/client/src/context/Authentication/AuthenticationState.js"],"names":["React","useReducer","useContext","chalk","AuthContext","authReducer","axios","REGISTER_FAIL","REGISTER_SUCCESS","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGOUT","SET_LOADING_TRUE","UPDATE_USER","SET_LOADING_FALSE","setAthToken","AlertContext","AuthState","props","alertContext","setAlert","initialState","token","localStorage","getItem","isAuthenticated","loading","user","error","state","dispatch","setLoadingTrue","type","loadUser","res","get","payload","data","console","log","Error","message","register","formData","config","headers","post","setLoadingFalse","response","msg","login","green","signInWithGoogle","logout","clearErrors","setLoadingtrue","updateUser","actionn","children"],"mappings":"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","sourcesContent":["\r\n\r\n// import React, { useReducer, useContext } from 'react';\r\nimport React, { useReducer, useContext } from \"react\"\r\nimport chalk from \"chalk\"\r\n\r\nimport AuthContext from './authenticationContext';\r\nimport authReducer from './authenticationReducer';\r\n\r\nimport axios from \"axios\"\r\nimport { REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED, \r\n\t\t\tAUTH_ERROR, LOGIN_SUCCESS, LOGOUT,\r\n\t\t\tSET_LOADING_TRUE, UPDATE_USER,\r\n\t\t\tSET_LOADING_FALSE} from '../types';\r\n\r\nimport setAthToken from \"../../utils/setAuthToken\"\r\n// import AlertContext from \"../AlertContext/AlertContext\"\r\nimport AlertContext from \"../AlertContext/AlertContext\"\r\n\r\nconst AuthState = (props) => {\r\n\r\n\tconst alertContext = useContext(AlertContext)\r\n\t// console.log(\"alert Context = \", alertContext)\r\n\t// console.log(\"SetAlert = \", alertContext.setAlert)\r\n\tconst  setAlert = alertContext.setAlert \r\n\tconst initialState = {\r\n\t\ttoken: localStorage.getItem('token'),\r\n\t\tisAuthenticated: null,\r\n\t\tloading: true,\r\n\t\tuser: null,\r\n\t\terror: null\r\n\t};\r\n\r\n\tconst [state, dispatch] = useReducer(authReducer, initialState);\r\n\t\r\n\tconst setLoadingTrue = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: SET_LOADING_TRUE\r\n\t\t}) \r\n\t}\r\n\t\r\n    //  Load user   ----> check for which user is logged in\r\n    const loadUser = async () => {\r\n\t\t//  --------> for authentication to work we need to store the token in global header with key\r\n\t\t//  ---------> X-auth-token\r\n\t\t// console.log(\"checking token\")\r\n\t\tif (localStorage.token){\t\t\t\t//-------> if a token exists in the local storage set it to global header\r\n\t\t\t// console.log(\"token found \", localStorage.token)\r\n\t\t\tsetAthToken(localStorage.token);     // ---> utility function  \r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst res = await axios.get(\"/api/auth\");\t\t// this will add user to the res.data if token is valid\r\n\t\t\t\r\n\t\t\t//  this code will run only if above request is successful\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USER_LOADED,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t})\r\n\t\t} catch (error) {\r\n\t\t\t//  this code will run if the authentication goes wrong\r\n\t\t\tconsole.error(\"there was an error in the catch block of the loadUser in the authenticationState.jsx\")\r\n\t\t\tconsole.log(\"ERROR:-\", Error.message )\r\n\t\t\tconsole.log(\"ERROR:-\", Error )\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AUTH_ERROR\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n    //  Register user -----> create user and token\r\n    const register = async formData => {\r\n\t\tconst config = {\r\n\t\t\theaders:\r\n\t\t\t{\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t} \r\n\t\t}\r\n\t\t\r\n\t\tsetLoadingTrue()\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst res = await axios.post(\"/api/users/\", formData, config)\r\n\t\t\tdispatch(\r\n\t\t\t\t{\r\n\t\t\t\ttype: REGISTER_SUCCESS,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\tloadUser()\r\n\t\t\tsetLoadingFalse()\r\n\t\t\treturn res\r\n\t\t} catch (error) {\r\n\t\t\tsetLoadingFalse()\r\n\t\t\tconsole.log(\"ERROR IN authenticationstate.js in the register function catch block\")\r\n\t\t\tconsole.log(\"error = \", error.response.data.msg)\r\n\t\t\tsetAlert(error.response.data.msg, \"danger\")\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: REGISTER_FAIL,\r\n\t\t\t\tpayload: error.response.data.msg\r\n\t\t\t})\r\n\t\t}\r\n    }\r\n\r\n\r\n    //  login user  --------> login and create token\r\n    const login = async (formData) => {\r\n\t\tconst config = {\r\n\t\t\theaders:\r\n\t\t\t{\r\n\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t} \r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst res = await axios.post(\"/api/auth\", formData, config)\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: LOGIN_SUCCESS,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tconsole.log(chalk.green(\"login Successful\"))\r\n\t\t\t// console.log(chalk.green(\"the response was = \", res))\r\n\t\t\tloadUser()\r\n\t\t\tsetLoadingFalse()\r\n\t\t\treturn res\r\n\t\t} catch (error) {\r\n\t\t\tsetAlert(error.response.data.msg, \"danger\")\r\n\t\t\tsetLoadingFalse()\r\n\t\t\tconsole.log(\"some error in the catch block of the login function in the AuthState.jsx\")\r\n\t\t\tconsole.log(\"error --> \", error.message)\r\n\t\t\tconsole.log(\"Error --> oobjb \", error.response.data.msg)\r\n\t\t}\r\n\t}\r\n\t//  Signin with Google\r\n\tconst signInWithGoogle = async() => {\r\n\t\ttry {\r\n\t\t\tconst res = await axios.get(\"localhost:3000/api/auth/google\")\r\n\t\t\t// console.log(\"RES.data in signin with google= \", res.data)\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: LOGIN_SUCCESS,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t})\r\n\t\t\t\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"some error in the catch block of the signinwithGogle function in the AuthState.jsx\")\r\n\t\t\tconsole.log(\"error --> \", error.message)\r\n\t\t\t// console.log(\"Error --> \", error.response.data.msg)\r\n\t\t}\r\n\r\n\t}\r\n    //  logout user --------> Logout the user\r\n    const logout = () => {\r\n\t\tdispatch({\r\n\t\t\ttype: LOGOUT\t\r\n\t\t})\r\n\t\tsetLoadingFalse()\r\n\t}\r\n\r\n    // clear errors      --------> clear the errors\r\n\tconst clearErrors = () => console.log(\"Clear errors\")\r\n\t\r\n\t//  Set loading true\r\n\tconst setLoadingtrue = () =>{\r\n\t\tdispatch({\r\n\t\t\ttype: SET_LOADING_TRUE\r\n\t\t})\r\n\t}\r\n\t//  set Loading fasle\r\nconst setLoadingFalse =() => {\r\n\tdispatch({\r\n\t\ttype: SET_LOADING_FALSE\r\n\t})\r\n}\r\n\r\n// update User\r\n // eslint-disable-next-line\r\nconst updateUser = (user) => {\r\n\tdispatch({\r\n\t\tactionn: UPDATE_USER,\r\n\t\tpayload: user\r\n\t})\r\n}\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n          value={{\r\n            token: state.token,\r\n            isAuthenticated: state.isAuthenticated,\r\n            loading: state.loading,\r\n            user: state.user,\r\n            error: state.error,\r\n\t\t\tsetLoadingtrue,\r\n\t\t\tsetLoadingFalse,\r\n            register,\r\n            login,signInWithGoogle,\r\n            logout,\r\n            clearErrors,\r\n            loadUser\r\n          }}\r\n        >\r\n          {props.children}\r\n        </AuthContext.Provider>\r\n      );\r\n}\r\n\r\nexport default AuthState;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}