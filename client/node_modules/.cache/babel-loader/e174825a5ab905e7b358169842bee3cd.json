{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\n\nconst useMovieFetch = movieId => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n      const result = await (await fetch(endpoint)).json();\n      const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\n      const directors = creditsResult.crew.filter(member => member.job === \"Director\");\n      setState({ ...result,\n        actors: creditsResult.cast,\n        directors\n      });\n    } catch (error) {\n      setError(true);\n      console.error(error.message);\n    }\n\n    setLoading(false);\n  }, [movieId]);\n  useEffect(() => {\n    if (localStorage[movieId]) {\n      console.log(\"grabbing movie info from local storage\");\n      setState(JSON.parse(localStorage[movieId]));\n      setLoading(false);\n    } else {\n      console.log(\"making api call to tmdb\");\n      fetchData();\n    }\n  }, [fetchData, movieId]);\n  useEffect(() => {\n    localStorage.setItem(movieId, JSON.stringify(state));\n  }, [movieId, state]);\n  return [state, loading, error];\n};\n\nexport default useMovieFetch;","map":{"version":3,"sources":["C:/Users/DELL/Keep Watching/Keep-Watching/client/src/components/hooks/useMovieFetch.jsx"],"names":["useState","useEffect","useCallback","API_URL","API_KEY","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchData","endpoint","result","fetch","json","creditsEndpoint","creditsResult","directors","crew","filter","member","job","actors","cast","console","message","localStorage","log","JSON","parse","setItem","stringify"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,WAA7B,QAA+C,OAA/C;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;;AAEA,MAAMC,aAAa,GAAIC,OAAD,IAAa;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMa,SAAS,GAAGX,WAAW,CAAC,YAAY;AACtCU,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACA,YAAMI,QAAQ,GAAI,GAAEX,OAAQ,SAAQG,OAAQ,YAAWF,OAAQ,EAA/D;AACA,YAAMW,MAAM,GAAG,MAAM,CAAE,MAAMC,KAAK,CAACF,QAAD,CAAb,EAA0BG,IAA1B,EAArB;AACA,YAAMC,eAAe,GAAI,GAAEf,OAAQ,SAAQG,OAAQ,oBAAmBF,OAAQ,EAA9E;AACA,YAAMe,aAAa,GAAG,MAAM,CAAE,MAAMH,KAAK,CAACE,eAAD,CAAb,EAAiCD,IAAjC,EAA5B;AAIA,YAAMG,SAAS,GAAID,aAAa,CAACE,IAAd,CAAmBC,MAAnB,CAA2BC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UAApD,CAAnB;AACAhB,MAAAA,QAAQ,CAAC,EACL,GAAGO,MADE;AAELU,QAAAA,MAAM,EAAEN,aAAa,CAACO,IAFjB;AAGLN,QAAAA;AAHK,OAAD,CAAR;AAKH,KAdD,CAcE,OAAOT,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAe,MAAAA,OAAO,CAAChB,KAAR,CAAcA,KAAK,CAACiB,OAApB;AACH;;AACDlB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAvB4B,EAuB1B,CAACJ,OAAD,CAvB0B,CAA7B;AAyBAL,EAAAA,SAAS,CAAE,MAAK;AACZ,QAAI4B,YAAY,CAACvB,OAAD,CAAhB,EAA0B;AACtBqB,MAAAA,OAAO,CAACG,GAAR,CAAY,wCAAZ;AACAtB,MAAAA,QAAQ,CAACuB,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACvB,OAAD,CAAvB,CAAD,CAAR;AACAI,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAJD,MAIK;AACDiB,MAAAA,OAAO,CAACG,GAAR,CAAY,yBAAZ;AACAjB,MAAAA,SAAS;AACZ;AACJ,GATQ,EASN,CAACA,SAAD,EAAYP,OAAZ,CATM,CAAT;AAWAL,EAAAA,SAAS,CACL,MAAM;AACF4B,IAAAA,YAAY,CAACI,OAAb,CAAqB3B,OAArB,EAA8ByB,IAAI,CAACG,SAAL,CAAe3B,KAAf,CAA9B;AACH,GAHI,EAIL,CAACD,OAAD,EAAUC,KAAV,CAJK,CAAT;AAMA,SAAO,CAACA,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACH,CAhDD;;AAkDA,eAAeN,aAAf","sourcesContent":["import {useState, useEffect, useCallback} from \"react\"\r\nimport { API_URL, API_KEY } from \"../../config\"\r\n\r\nconst useMovieFetch = (movieId) => {\r\n    const [state, setState] = useState({})\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n\r\n    const fetchData = useCallback(async () => {\r\n        setError(false)\r\n        setLoading(true)\r\n\r\n        try {\r\n            const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`\r\n            const result = await ( await fetch(endpoint) ).json()\r\n            const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`\r\n            const creditsResult = await ( await fetch(creditsEndpoint) ).json()\r\n            \r\n\r\n\r\n            const directors =  creditsResult.crew.filter( member => member.job === \"Director\")\r\n            setState({\r\n                ...result,\r\n                actors: creditsResult.cast,\r\n                directors\r\n            })\r\n        } catch (error) {\r\n            setError(true);\r\n            console.error(error.message)\r\n        }\r\n        setLoading(false)\r\n    }, [movieId])\r\n\r\n    useEffect( () =>{\r\n        if (localStorage[movieId]){\r\n            console.log(\"grabbing movie info from local storage\")\r\n            setState(JSON.parse(localStorage[movieId]))\r\n            setLoading(false)\r\n        }else{\r\n            console.log(\"making api call to tmdb\")\r\n            fetchData();\r\n        }\r\n    }, [fetchData, movieId])\r\n    \r\n    useEffect(\r\n        () => {\r\n            localStorage.setItem(movieId, JSON.stringify(state))\r\n        },\r\n        [movieId, state]\r\n    )\r\n    return [state, loading, error]\r\n}\r\n\r\nexport default useMovieFetch"]},"metadata":{},"sourceType":"module"}